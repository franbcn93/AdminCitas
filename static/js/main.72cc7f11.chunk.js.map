{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","console","log","action","htmlFor","type","placeholder","onChange","style","width","rows","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72cc7f11.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport { uuid } from \"uuidv4\";\nimport PropTypes from \"prop-types\";\n\nexport const Formulario = ({ crearCita }) => {\n  // Crear State de citas\n  const [cita, actualizarCita] = useState({\n    mascota: \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\",\n  });\n\n  const [error, actualizarError] = useState(false);\n\n  //   Función que se ejecuta cada vez que el usuario escribe en el input\n  const actualizarState = (e) =>\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n\n  // Extraer valores\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  //Cuando el usuario presiona agregar cita\n  const submitCita = (e) => {\n    e.preventDefault();\n\n    //   Validar\n    if (\n      mascota.trim() === \"\" ||\n      propietario.trim() === \"\" ||\n      fecha.trim() === \"\" ||\n      hora.trim() === \"\" ||\n      sintomas.trim() === \"\"\n    ) {\n      actualizarError(true);\n      return;\n    }\n\n    // Eliminarel mensaje previo\n    actualizarError(false);\n\n    //   Asignar iD\n    cita.id = uuid();\n    console.log(cita);\n\n    // Crear cita\n    crearCita(cita);\n\n    // Reiniciar el form\n  };\n\n  return (\n    <Fragment>\n      <h2>Crear citas</h2>\n      {error ? (\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n      ) : null}\n      <form onSubmit={submitCita} action=\"\">\n        <label htmlFor=\"\">Nombre mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n        <label htmlFor=\"\">Nombre dueño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre dueño mascota\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n        <label htmlFor=\"\">Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n        <label htmlFor=\"\">Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n        <label htmlFor=\"\">Síntomas</label>\n        <textarea\n          name=\"sintomas\"\n          id=\"\"\n          style={{ width: \"100%\" }}\n          rows=\"10\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar cita\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Cita = ({ cita, eliminarCita }) => (\n  <div className=\"cita\">\n    <p>\n      Mascota: <span>{cita.mascota}</span>\n    </p>\n    <p>\n      Dueño: <span>{cita.propietario}</span>\n    </p>\n    <p>\n      Fecha: <span>{cita.fecha}</span>\n    </p>\n    <p>\n      Hora: <span>{cita.hora}</span>\n    </p>\n    <p>\n      Síntomas: <span>{cita.sintomas}</span>\n    </p>\n    <button\n      className=\"button eliminar u-full-width\"\n      onClick={() => eliminarCita(cita.id)}\n    >\n      Eliminar &times;\n    </button>\n  </div>\n);\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired,\n};\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Formulario } from \"./components/Formulario\";\nimport { Cita } from \"./components/Cita\";\n\nfunction App() {\n  // Citas en el localStorage\n  let citasIniciales = JSON.parse(localStorage.getItem(\"citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n  //  Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //  UseEffect para realizar ciertas operaciones cuando el satte cambia\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  // Función que tome las citas actuales y agregue la nueva\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  // Función que elimina una cita por su id\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n\n  // Mensaje condicional\n  const titulo = citas.length === 0 ? \"No hay citas\" : \"Administra tus citas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>;\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}